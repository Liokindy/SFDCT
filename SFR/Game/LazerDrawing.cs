using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using SFD;
using HarmonyLib;

namespace SFDCT.Game;

[HarmonyPatch]
internal static class OverrideLazers
{
    /// <summary>
    ///     Stop default drawing of the lazer
    /// </summary>
    [HarmonyPrefix]
    [HarmonyPatch(typeof(GameWorld), nameof(GameWorld.DrawLazer))]
    private static bool PatchDefaultLazer() { return false; }
}

internal static class LazerDrawing
{
    private static readonly float[] Noise = new float[]
    {
        -0.043137254901961f,
        -0.019607843137255f,
        -0.003921568627451f,
        0.011764705882353f,
        0.035294117647059f,
        0.066666666666667f,
        0.10588235294118f,
        0.14509803921569f,
        0.2f,
        0.23921568627451f,
        0.27058823529412f,
        0.30980392156863f,
        0.34901960784314f,
        0.38039215686275f,
        0.40392156862745f,
        0.43529411764706f,
        0.45882352941176f,
        0.45882352941176f,
        0.47450980392157f,
        0.47450980392157f,
        0.45882352941176f,
        0.45882352941176f,
        0.43529411764706f,
        0.40392156862745f,
        0.38039215686275f,
        0.34901960784314f,
        0.29411764705882f,
        0.25490196078431f,
        0.2f,
        0.14509803921569f,
        0.090196078431373f,
        0.035294117647059f,
        -0.043137254901961f,
        -0.098039215686275f,
        -0.15294117647059f,
        -0.22352941176471f,
        -0.30196078431373f,
        -0.35686274509804f,
        -0.42745098039216f,
        -0.48235294117647f,
        -0.53725490196078f,
        -0.5921568627451f,
        -0.63137254901961f,
        -0.67058823529412f,
        -0.70196078431373f,
        -0.72549019607843f,
        -0.74117647058824f,
        -0.74117647058824f,
        -0.74117647058824f,
        -0.72549019607843f,
        -0.70196078431373f,
        -0.67058823529412f,
        -0.63137254901961f,
        -0.5921568627451f,
        -0.56078431372549f,
        -0.50588235294118f,
        -0.44313725490196f,
        -0.38823529411765f,
        -0.31764705882353f,
        -0.26274509803922f,
        -0.2078431372549f,
        -0.15294117647059f,
        -0.11372549019608f,
        -0.058823529411765f,
        -0.043137254901961f,
        -0.003921568627451f,
        -0.003921568627451f,
        0.011764705882353f,
        0.011764705882353f,
        -0.003921568627451f,
        -0.019607843137255f,
        -0.043137254901961f,
        -0.058823529411765f,
        -0.074509803921569f,
        -0.098039215686275f,
        -0.12941176470588f,
        -0.15294117647059f,
        -0.1921568627451f,
        -0.2078431372549f,
        -0.22352941176471f,
        -0.26274509803922f,
        -0.27843137254902f,
        -0.27843137254902f,
        -0.30196078431373f,
        -0.31764705882353f,
        -0.31764705882353f,
        -0.31764705882353f,
        -0.31764705882353f,
        -0.30196078431373f,
        -0.27843137254902f,
        -0.26274509803922f,
        -0.24705882352941f,
        -0.2078431372549f,
        -0.16862745098039f,
        -0.12941176470588f,
        -0.074509803921569f,
        -0.043137254901961f,
        0.035294117647059f,
        0.10588235294118f,
        0.1843137254902f,
        0.27058823529412f,
        0.34901960784314f,
        0.43529411764706f,
        0.52941176470588f,
        0.6078431372549f,
        0.69411764705882f,
        0.74901960784314f,
        0.82745098039216f,
        0.88235294117647f,
        0.92156862745098f,
        0.95294117647059f,
        0.97647058823529f,
        0.9921568627451f,
        0.9921568627451f,
        0.97647058823529f,
        0.95294117647059f,
        0.92156862745098f,
        0.86666666666667f,
        0.81176470588235f,
        0.73333333333333f,
        0.66274509803922f,
        0.5843137254902f,
        0.49803921568627f,
        0.40392156862745f,
        0.30980392156863f,
        0.2156862745098f,
        0.12156862745098f,
        0.050980392156863f,
        -0.043137254901961f,
        -0.11372549019608f,
        -0.1921568627451f,
        -0.27843137254902f,
        -0.35686274509804f,
        -0.44313725490196f,
        -0.53725490196078f,
        -0.6156862745098f,
        -0.68627450980392f,
        -0.75686274509804f,
        -0.81960784313725f,
        -0.87450980392157f,
        -0.90588235294118f,
        -0.94509803921569f,
        -0.96078431372549f,
        -0.96078431372549f,
        -0.96078431372549f,
        -0.96078431372549f,
        -0.92941176470588f,
        -0.90588235294118f,
        -0.85098039215686f,
        -0.79607843137255f,
        -0.74117647058824f,
        -0.68627450980392f,
        -0.6156862745098f,
        -0.52156862745098f,
        -0.44313725490196f,
        -0.37254901960784f,
        -0.30196078431373f,
        -0.2078431372549f,
        -0.15294117647059f,
        -0.074509803921569f,
        -0.043137254901961f,
        0.011764705882353f,
        0.035294117647059f,
        0.050980392156863f,
        0.050980392156863f,
        0.050980392156863f,
        0.050980392156863f,
        0.035294117647059f,
        0.011764705882353f,
        -0.019607843137255f,
        -0.043137254901961f,
        -0.074509803921569f,
        -0.11372549019608f,
        -0.15294117647059f,
        -0.16862745098039f,
        -0.2078431372549f,
        -0.24705882352941f,
        -0.26274509803922f,
        -0.30196078431373f,
        -0.31764705882353f,
        -0.33333333333333f,
        -0.33333333333333f,
        -0.33333333333333f,
        -0.35686274509804f,
        -0.33333333333333f,
        -0.33333333333333f,
        -0.31764705882353f,
        -0.27843137254902f,
        -0.24705882352941f,
        -0.2078431372549f,
        -0.15294117647059f,
        -0.098039215686275f,
        -0.043137254901961f,
        0.035294117647059f,
        0.090196078431373f,
        0.14509803921569f,
        0.1843137254902f,
        0.2156862745098f,
        0.23921568627451f,
        0.25490196078431f,
        0.27058823529412f,
        0.27058823529412f,
        0.27058823529412f,
        0.25490196078431f,
        0.23921568627451f,
        0.2156862745098f,
        0.2f,
        0.1843137254902f,
        0.14509803921569f,
        0.12156862745098f,
        0.090196078431373f,
        0.050980392156863f,
        0.011764705882353f,
        -0.003921568627451f,
        -0.043137254901961f,
        -0.058823529411765f,
        -0.098039215686275f,
        -0.11372549019608f,
        -0.12941176470588f,
        -0.12941176470588f,
        -0.12941176470588f,
        -0.11372549019608f,
        -0.098039215686275f,
        -0.074509803921569f,
        -0.043137254901961f,
        0.011764705882353f,
        0.066666666666667f,
        0.10588235294118f,
        0.16078431372549f,
        0.2f,
        0.23921568627451f,
        0.27058823529412f,
        0.29411764705882f,
        0.32549019607843f,
        0.34901960784314f,
        0.34901960784314f,
        0.36470588235294f,
        0.36470588235294f,
        0.36470588235294f,
        0.36470588235294f,
        0.36470588235294f,
        0.34901960784314f,
        0.32549019607843f,
        0.30980392156863f,
        0.27058823529412f,
        0.25490196078431f,
        0.2156862745098f,
        0.1843137254902f,
        0.14509803921569f,
        0.12156862745098f,
        0.090196078431373f,
        0.050980392156863f,
        0.035294117647059f,
        -0.003921568627451f,
        -0.019607843137255f,
        -0.019607843137255f
    };

    private static Dictionary<int, int> NoiseIndexCache = new();
    private static float NoiseGlobalProgress = 0f;

    /// <summary>
    ///     Returns perlin noise
    /// </summary>
    public static float GetNoise(int index = 0)
    {
        if (NoiseIndexCache.TryGetValue(index, out int noiseIndex))
        {
            return Noise[((int)NoiseGlobalProgress + noiseIndex) % Noise.Length];
        }
        else
        {
            NoiseIndexCache.Add(index, SFD.Constants.RANDOM.Next(Noise.Length));
        }
        return 0f;
    }
    public static void Update(float ms)
    {
        NoiseGlobalProgress += ms * 0.05f;
    }
    public static void Dispose()
    {
        NoiseIndexCache.Clear();
    }
    public static void DrawLazer(SpriteBatch sb, bool strongAlpha, Vector2 start, Vector2 end, Vector2 dir)
    {
        Vector2 vector = Camera.ConvertWorldToScreen(end);
        int num = Math.Max((int)Camera.Zoom, 1);

        float bodyAlpha = strongAlpha ? Constants.RANDOM.NextFloat(0.3f, 0.5f) : Constants.RANDOM.NextFloat(0.05f, 0.15f);

        Color lazerColorBody = ColorCorrection.CreateCustom(Constants.COLORS.Create(Constants.COLORS.LAZER, bodyAlpha));
        Color lazerColorEnd = ColorCorrection.CreateCustom(Constants.COLORS.Create(Constants.COLORS.LAZER, Constants.RANDOM.NextFloat(0.85f, 0.95f)));
        float lazerAngle = (float)Math.Atan2(-dir.Y, dir.X);

        Vector2 vector2 = Camera.ConvertWorldToScreen(start);
        float x = (vector2 - vector).Length();

        sb.Draw(
            Constants.WhitePixel,
            vector2 + (vector - vector2) * 0.5f,
            null,
            lazerColorBody,
            lazerAngle,
            new Vector2(0.5f),
            new Vector2(x, (float)num),
            SpriteEffects.None, 
            0f
        );
        
        vector.X += Constants.RANDOM.NextFloat(-0.7f, 0.7f);
        vector.Y += Constants.RANDOM.NextFloat(-0.7f, 0.7f);
        sb.Draw(
            Constants.WhitePixel,
            vector,
            null,
            lazerColorEnd,
            lazerAngle,
            new Vector2(0.5f),
            new Vector2((float)num * 1.5f, (float)num * 1.5f),
            SpriteEffects.None,
            0f
        );
    }
}
